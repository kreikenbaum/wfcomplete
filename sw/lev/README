Data processing begins when there is a folder called newcelltraces3/
in the same folder as this README file that contains packet traces. 
This folder can be downloaded from:

cs.uwaterloo.ca/~t55wang/celltraces/newcelltraces.zip

First, type make to compile the files. Then type bash process.sh
for a simple demonstration of this code on 10 websites and 10 trials each. (takes around 5-10 minutes)

Each file in the data folder has the name: X_N.txt where X is the 
website and N is the trial number. All combinations of X and N where
1 <= X <= WEBSITE_NUM, 1 <= N <= TRIAL_NUM must be present in the folder, or the
process cannot continue. The user can set WEBSITE_NUM and TRIAL_NUM. 
Other combinations are ignored. Each such file
represents a traffic instance and it is a list of integers separated by \n; 
positive integers are outgoing packets and negative integers are incoming 
packets.

The code then proceeds as follows:
					INPUT					OUTPUT
Levenshtein_cantor_mpi.cpp:  		Traffic instances			Separated distance matrix
cantor2matrix.c				Separated distance matrix		Combined matrix (with exponent)
gen_stratify.cpp			Combined matrix (with exponent)		Test/training sets
svm_train				Training sets				Training models
svm_predict				Training model, test sets		Results

The portion involving gen_stratify.cpp, svm_train, and svm_predict can
be done by running svmdotest.rb. The entire process can be done
by first running Levenshtein_cantor_mpi to generate the matrix, then
using a shell code similar to process.sh (which can be tuned to suit
specific experimental settings). 

This code was developed by Cai et al. We modified the code.

Note that Levenshtein_cantor_mpi.cpp should be run in parallel as it would take
a significant number of CPU hours on 100 websites and 40 trials each.

Feel free to direct all questions via e-mail to t55wang, at the domain 
uwaterloo.ca. 
